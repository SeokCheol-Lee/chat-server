version: '1'
services:
  mysql:
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: 12
      MYSQL_DATABASE: chat
    ports:
      - "3306:3306"
    networks:
      - chat

  redis-1:
    image: redis:1.0.0
    container_name: redis-1
    ports:
      - "6379:6379"
    networks:
      - chat
      - redis-net
  redis-2:
    image: redis:1.0.0
    container_name: redis-2
    ports:
      - "6380:6379"
    networks:
      - chat
      - redis-net
  redis-3:
    image: redis:1.0.0
    container_name: redis-3
    ports:
      - "6381:6379"
    networks:
      - chat
      - redis-net
  redis-4:
    image: redis:1.0.0
    container_name: redis-4
    ports:
      - "6382:6379"
    networks:
      - chat
      - redis-net
  redis-5:
    image: redis:1.0.0
    container_name: redis-5
    ports:
      - "6383:6379"
    networks:
      - chat
      - redis-net
  redis-6:
    image: redis:1.0.0
    container_name: redis-6
    ports:
      - "6384:6379"
    networks:
      - chat
      - redis-net
  redis-init:
    image: redis:latest
    container_name: redis-init
    depends_on:
      - redis-1
      - redis-2
      - redis-3
      - redis-4
      - redis-5
      - redis-6
    entrypoint: [ "sh", "-c", "echo 'yes' | redis-cli --cluster create \
          redis-1:6379 \
          redis-2:6379 \
          redis-3:6379 \
          redis-4:6379 \
          redis-5:6379 \
          redis-6:6379 \
          --cluster-replicas 1" ]
    networks:
      - chat
      - redis-net

  my-server-1:
    image: my-server1:1.0.0
    container_name: server_1
    ports:
      - "8080:8080"
    networks:
      - chat

  my-server-2:
    image: my-server2:1.0.0
    container_name: server_2
    ports:
      - "8081:8081"
    networks:
      - chat

  my-server-3:
    image: my-server3:1.0.0
    container_name: server_3
    ports:
      - "8082:8082"
    networks:
      - chat

  nginx:
    image: nginx:1.0.0
    container_name: nginx
    ports:
      - "80:80"
    networks:
      - chat

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - elk

  kafka:
    image: wurstmeister/kafka:2.12-2.2.1
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
    networks:
      - chat
      - elk
    depends_on:
      - zookeeper

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.3
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
    networks:
      - elk

  logstash:
    image: logstash:1.0.0
    container_name: logstash
    ports:
      - "5044:5044"
      - "9600:9600"  # for Logstash monitoring API
    networks:
      - elk
    depends_on:
      - elasticsearch
      - kafka

  kibana:
    image: docker.elastic.co/kibana/kibana:7.9.3
    container_name: kibana
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on:
      - elasticsearch

networks:
  chat:
    driver: bridge
  elk:
    driver: bridge
  redis-net:
    driver: bridge